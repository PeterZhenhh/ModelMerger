<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PhilLibX</name>
    </assembly>
    <members>
        <member name="T:PhilLibX.Animation">
            <summary>
            A class to hold a 3-D Animation
            </summary>
        </member>
        <member name="T:PhilLibX.Animation.DataType">
            <summary>
            Animation/Bone Data Types
            </summary>
        </member>
        <member name="F:PhilLibX.Animation.DataType.None">
            <summary>
            Animation Data is same as other bones (for bones that will match the other bones)
            </summary>
        </member>
        <member name="F:PhilLibX.Animation.DataType.Absolute">
            <summary>
            Animation Data is relative to zero
            </summary>
        </member>
        <member name="F:PhilLibX.Animation.DataType.Relative">
            <summary>
            Animation Data is relative to parent bind pose
            </summary>
        </member>
        <member name="F:PhilLibX.Animation.DataType.Additive">
            <summary>
            Animation Data is applied to existing animation data in the scene
            </summary>
        </member>
        <member name="T:PhilLibX.Animation.Bone">
            <summary>
            A class to hold an Animation Bone
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Bone.Name">
            <summary>
            Gets or Sets the name of the bone
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Bone.ParentIndex">
            <summary>
            Gets or Sets the index of the parent bone
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Bone.Type">
            <summary>
            Gets or Sets the data type for this bone
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Bone.Translations">
            <summary>
            Gets or Sets the translation keys
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Bone.Rotations">
            <summary>
            Gets or Sets the rotation keys
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Bone.Scales">
            <summary>
            Gets or Sets the rotation keys
            </summary>
        </member>
        <member name="M:PhilLibX.Animation.Bone.#ctor(System.String)">
            <summary>
            Creates a new animation bone
            </summary>
            <param name="name">Name of the bone</param>
        </member>
        <member name="M:PhilLibX.Animation.Bone.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new animation bone
            </summary>
            <param name="name">Name of the bone</param>
            <param name="parentIndex">Parent index</param>
        </member>
        <member name="M:PhilLibX.Animation.Bone.#ctor(System.String,PhilLibX.Animation.DataType)">
            <summary>
            Creates a new animation bone
            </summary>
            <param name="name">Name of the bone</param>
            <param name="type">Bone data type</param>
        </member>
        <member name="M:PhilLibX.Animation.Bone.#ctor(System.String,System.Int32,PhilLibX.Animation.DataType)">
            <summary>
            Creates a new animation bone
            </summary>
            <param name="name">Name of the bone</param>
            <param name="parentIndex">Parent index</param>
            <param name="type">Bone data type</param>
        </member>
        <member name="M:PhilLibX.Animation.Bone.GetTranslation(System.Int32)">
            <summary>
            Gets the Translation at the frame
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.Animation.Bone.GetRotation(System.Int32)">
            <summary>
            Gets the Rotation at the frame
            </summary>
            <param name="frame"></param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.Animation.Bone.ToString">
            <summary>
            Gets the name of the bone as a string representation of it
            </summary>
            <returns>Name</returns>
        </member>
        <member name="T:PhilLibX.Animation.Note">
            <summary>
            A class to hold an Animation Note
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Note.Name">
            <summary>
            Gets or Sets the note name
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Note.Frames">
            <summary>
            Gets or Sets the frames the note occurs on
            </summary>
        </member>
        <member name="M:PhilLibX.Animation.Note.#ctor(System.String)">
            <summary>
            Creates a new animation notetrack
            </summary>
            <param name="name">note name</param>
        </member>
        <member name="P:PhilLibX.Animation.Bones">
            <summary>
            Gets or Sets the animation bones
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Notes">
            <summary>
            Gets or Sets the animation notes
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Type">
            <summary>
            Gets or Sets the data type for this animation
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.Framerate">
            <summary>
            Gets or Sets the framerate
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.ContainsTranslationKeys">
            <summary>
            Gets whether the animation contains translation keys in any of the bones
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.ContainsRotationKeys">
            <summary>
            Gets whether the animation contains rotation keys in any of the bones
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.ContainsScaleKeys">
            <summary>
            Gets whether the animation contains scale keys in any of the bones
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.FrameCount">
            <summary>
            Gets the number of frames (highest frame across bones/notes)
            </summary>
        </member>
        <member name="P:PhilLibX.Animation.ContainsNotes">
            <summary>
            Gets whether the animation contains notes
            </summary>
        </member>
        <member name="M:PhilLibX.Animation.#ctor">
            <summary>
            Creates a new animation
            </summary>
        </member>
        <member name="M:PhilLibX.Animation.#ctor(PhilLibX.Animation.DataType)">
            <summary>
            Creates a new animation
            </summary>
            <param name="type">Animation data type</param>
        </member>
        <member name="M:PhilLibX.Animation.Clear">
            <summary>
            Clears all loaded data
            </summary>
        </member>
        <member name="M:PhilLibX.Animation.SetDataType(System.String,System.Int32,PhilLibX.Animation.DataType)">
            <summary>
            Adds a translation frame for the given bone at the given frame
            </summary>
            <param name="bone">Bone to add the keyframe too, if the bone doesn't exist, it will be created and added to the animation</param>
            <param name="frame">Frame to set the data on</param>
            <param name="data">Translation data to add at the frame</param>
        </member>
        <member name="M:PhilLibX.Animation.AddTranslation(System.String,System.Int32,PhilLibX.Mathematics.Vector3)">
            <summary>
            Adds a translation frame for the given bone at the given frame
            </summary>
            <param name="bone">Bone to add the keyframe too, if the bone doesn't exist, it will be created and added to the animation</param>
            <param name="frame">Frame to set the data on</param>
            <param name="data">Translation data to add at the frame</param>
        </member>
        <member name="M:PhilLibX.Animation.AddScale(System.String,System.Int32,PhilLibX.Mathematics.Vector3)">
            <summary>
            Adds a translation frame for the given bone at the given frame
            </summary>
            <param name="bone">Bone to add the keyframe too, if the bone doesn't exist, it will be created and added to the animation</param>
            <param name="frame">Frame to set the data on</param>
            <param name="data">Translation data to add at the frame</param>
        </member>
        <member name="M:PhilLibX.Animation.AddRotation(System.String,System.Int32,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Adds a rotation frame for the given bone at the given frame
            </summary>
            <param name="bone">Bone to add the keyframe too, if the bone doesn't exist, it will be created and added to the animation</param>
            <param name="frame">Frame to set the data on</param>
            <param name="data">Rotation data to add at the frame</param>
        </member>
        <member name="M:PhilLibX.Animation.Scale(System.Single)">
            <summary>
            Scales the animation by the given value
            </summary>
            <param name="value">Value to scale the animation by</param>
        </member>
        <member name="M:PhilLibX.Animation.ToSEAnim(System.String)">
            <summary>
            Saves the animation to a SEAnim
            </summary>
            <param name="path">Output Path</param>
        </member>
        <member name="T:PhilLibX.Bytes">
            <summary>
            Utilities for working with Bytes and Bits
            </summary>
        </member>
        <member name="M:PhilLibX.Bytes.ReadNullTerminatedString(System.Byte[],System.Int32)">
            <summary>
            Reads a null terminated string from a byte array
            </summary>
            <param name="input">Byte Array input</param>
            <param name="startIndex">Start Index</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:PhilLibX.Bytes.GetBit(System.Int64,System.Int32)">
            <summary>
            Gets the value of the bit at the given position
            </summary>
            <param name="input">Integer Input</param>
            <param name="bit">Position</param>
            <returns>Result</returns>
        </member>
        <member name="M:PhilLibX.Bytes.BytesToStruct``1(System.Byte[])">
            <summary>
            Converts an array of bytes to a struct
            </summary>
            <typeparam name="T">Struct Type</typeparam>
            <param name="data">Raw data</param>
            <returns>Resulting Structure</returns>
        </member>
        <member name="M:PhilLibX.Bytes.BytesToStruct``1(System.Byte[],System.Int32)">
            <summary>
            Converts an array of bytes to a struct
            </summary>
            <typeparam name="T">Struct Type</typeparam>
            <param name="data">Raw data</param>
            <param name="startIndex">Start index to convert from</param>
            <returns>Resulting Structure</returns>
        </member>
        <member name="M:PhilLibX.Bytes.StructToBytes``1(``0)">
            <summary>
            Converts a structure to an array of bytes
            </summary>
            <typeparam name="T">Struct Type</typeparam>
            <param name="structure">Structure to convert</param>
            <returns>Resulting byte array</returns>
        </member>
        <member name="T:PhilLibX.Cryptography.Hash.CRC32">
            <summary>
            Class to handle calculating CRC32
            </summary>
        </member>
        <member name="F:PhilLibX.Cryptography.Hash.CRC32.CRC32Table">
            <summary>
            CRC32 Table
            </summary>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.CRC32.Calculate(System.String)">
            <summary>
            Calculates CRC32 for a given string.
            </summary>
            <param name="value">String to generate a hash from</param>
            <returns>Resulting Unsigned CRC32 Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.CRC32.Calculate(System.Byte[])">
            <summary>
            Calculates CRC32 for a sequence of bytes.
            </summary>
            <param name="value">Bytes to generate a hash from</param>
            <returns>Resulting Unsigned CRC32 Value</returns>
        </member>
        <member name="T:PhilLibX.Cryptography.Hash.DJB">
            <summary>
            Class to handle calculating DJB Hash
            </summary>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.DJB.Calculate(System.String,System.UInt32)">
            <summary>
            Calculates DJB Hash for the given string.
            </summary>
            <param name="value">String to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to 0x1505/5381)</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.DJB.Calculate(System.Byte[],System.UInt32)">
            <summary>
            Calculates DJB Hash for a sequence of bytes.
            </summary>
            <param name="value">Bytes to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to 0x1505/5381)</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="T:PhilLibX.Cryptography.Hash.FNV1a">
            <summary>
            Class to handle calculating FNV1a Hash
            </summary>
        </member>
        <member name="F:PhilLibX.Cryptography.Hash.FNV1a.OffsetBasis32">
            <summary>
            Offset Basis for calculating 32bit FNV1a Hashes
            </summary>
        </member>
        <member name="F:PhilLibX.Cryptography.Hash.FNV1a.OffsetBasis64">
            <summary>
            Offset Basis for calculating 64bit FNV1a Hashes
            </summary>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.FNV1a.Calculate32(System.String,System.UInt32)">
            <summary>
            Calculates 32Bit FNV1a Hash for a given string
            </summary>
            <param name="value">String to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to OffsetBasis32))</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.FNV1a.Calculate64(System.String,System.UInt64)">
            <summary>
            Calculates 32Bit FNV1a Hash for a given string
            </summary>
            <param name="value">String to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to OffsetBasis32))</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.FNV1a.Calculate32(System.Byte[],System.UInt32)">
            <summary>
            Calculates 32Bit FNV1a Hash for a sequence of bytes.
            </summary>
            <param name="value">Bytes to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to OffsetBasis32))</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.FNV1a.Calculate64(System.Byte[],System.UInt64)">
            <summary>
            Calculates 64Bit FNV1a Hash for a sequence of bytes.
            </summary>
            <param name="value">Bytes to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to OffsetBasis64))</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="T:PhilLibX.Cryptography.Hash.MurMur3">
            <summary>
            Class to handle calculating SDBM Hash
            </summary>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.MurMur3.Calculate(System.String,System.UInt32)">
            <summary>
            Calculates MurMur3 Hash for the given string.
            </summary>
            <param name="value">String to generate a hash from</param>
            <param name="seed">Initial Hash Value (0)</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.MurMur3.Calculate(System.Byte[],System.UInt32)">
            <summary>
            Calculates MurMur3 Hash for a sequence of bytes.
            </summary>
            <param name="value">Bytes to generate a hash from</param>
            <param name="seed">Initial Hash Value (Defaults to 0))</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="T:PhilLibX.Cryptography.Hash.SDBM">
            <summary>
            Class to handle calculating SDBM Hash
            </summary>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.SDBM.Calculate(System.String,System.UInt32)">
            <summary>
            Calculates SDBM Hash for the given string.
            </summary>
            <param name="value">String to generate a hash from</param>
            <param name="initial">Initial Hash Value (0)</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="M:PhilLibX.Cryptography.Hash.SDBM.Calculate(System.Byte[],System.UInt32)">
            <summary>
            Calculates SDBM Hash for a sequence of bytes.
            </summary>
            <param name="value">Bytes to generate a hash from</param>
            <param name="initial">Initial Hash Value (Defaults to 0))</param>
            <returns>Resulting Unsigned Hash Value</returns>
        </member>
        <member name="T:PhilLibX.EnumerableExtensions">
            <summary>
            A class with Enumerable Extensions
            </summary>
        </member>
        <member name="M:PhilLibX.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.EnumerableExtensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:PhilLibX.Imaging.BitmapX">
            <summary>
            Faster Bitmap Processing
            </summary>
        </member>
        <member name="F:PhilLibX.Imaging.BitmapX.AcceptedBitsPerPixel">
            <summary>
            Accepted Bits Per Pixel (for now we only support 24 and 32bpp
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.PixelDataPointer">
            <summary>
            Pixel Data Pointer
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.Pixels">
            <summary>
            Raw Pixel Data
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.BitmapSource">
            <summary>
            Source Bitmap Object
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.BitmapDataSource">
            <summary>
            Source Bitmap Data Object
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX._BitsPerPixel">
            <summary>
            Internal Bits Per Pizel Value
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX._Width">
            <summary>
            Internal Bitmap Width Value
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX._Height">
            <summary>
            Internal  Bitmap Height Value
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.Width">
            <summary>
            Bitmap Width
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.Height">
            <summary>
            Bitmap Height
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.BitsPerPixel">
            <summary>
            Number of bits per pixel. (24, 
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.BytesPerPixel">
            <summary>
            Number of bits per pixel. (24, 
            </summary>
        </member>
        <member name="P:PhilLibX.Imaging.BitmapX.PixelCount">
            <summary>
            Pixel Count
            </summary>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.#ctor(System.Int32,System.Int32,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes BitmapX with a new Bitmap
            </summary>
            <param name="width">Pixel Width</param>
            <param name="height">Pixel Height</param>
            <param name="pixelFormat">Pixel Format (32bpp ARGB by Default)</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.#ctor(System.String)">
            <summary>
            Initializes BitmapX with a file
            </summary>
            <param name="fileName">Path to image file</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.#ctor(System.Drawing.Image)">
            <summary>
            Initializes BitmapX with an Image
            </summary>
            <param name="image">Existing Image Object</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.#ctor(System.IO.Stream)">
            <summary>
            Initializes BitmapX with a Stream
            </summary>
            <param name="stream">Stream with Image data</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes BitmapX with a Bitmap
            </summary>
            <param name="bitmap">Bitmap Source</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.LoadBitmap(System.Drawing.Bitmap)">
            <summary>
            Loads a Bitmap into the BitmapX
            </summary>
            <param name="bitmap">Bitmap Source</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.LockBits">
            <summary>
            Locks the Bits of the Source Bitmap
            </summary>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.UnlockBits">
            <summary>
            Unlocks the Bits of the Source Image
            </summary>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets Color at the given Pixel
            </summary>
            <param name="x">X Coordinate</param>
            <param name="y">Y Coordinate</param>
            <returns>Resulting Color</returns>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets Color at the given Pixel 
            </summary>
            <param name="x">X Coordinate</param>
            <param name="y">Y Coordinate</param>
            <param name="color">Color to set</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.Save(System.String,System.Boolean)">
            <summary>
            Saves the BitmapX to the given path
            </summary>
            <param name="filePath">File path to save to</param>
            <param name="relockBits">Whether or not to relock the bits after unlocking</param>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.IsSingleColor">
            <summary>
            Checks if this image is 1 color
            </summary>
            <returns>False if has pixel differences, otherwise True</returns>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.HasColorsGreaterThan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if this image has colors greater than the given values
            </summary>
            <param name="rValue"></param>
            <param name="bValue"></param>
            <param name="gValue"></param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.IsMonochrome">
            <summary>
            Checks if this image is monochrome
            </summary>
            <returns>False if has pixel differences, otherwise True</returns>
        </member>
        <member name="M:PhilLibX.Imaging.BitmapX.Dispose">
            <summary>
            Disposes of the BitmapX Object
            </summary>
        </member>
        <member name="T:PhilLibX.IO.BinaryReaderExtensions">
            <summary>
            IO Utilities/Extensions
            </summary>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadNullTerminatedString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a string terminated by a null byte
            </summary>
            <returns>Read String</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadNullTerminatedString(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
            Reads a string terminated by a null byte
            </summary>
            <param name="br">Reader</param>
            <param name="offset">Absolute offset of the string</param>
            <param name="maxSize">Max size of the string to read</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadUTF16NullTerminatedString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a UTF16 string terminated by a null byte
            </summary>
            <returns>Read String</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadUTF16NullTerminatedString(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
            Reads a UTF16 string terminated by a null byte
            </summary>
            <param name="br">Reader</param>
            <param name="offset">Absolute offset of the string</param>
            <param name="maxSize">Max size of the string to read</param>
            <returns>Resulting string</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadFixedString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a string of fixed size
            </summary>
            <param name="br">Reader</param>
            <param name="numBytes">Size of string in bytes</param>
            <returns>Read String</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadFixedString(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
            Reads a string of fixed size
            </summary>
            <param name="br">Reader</param>
            <param name="offset">Absolute offset of the string</param>
            <param name="numBytes">Size of string in bytes</param>
            <returns>Read String</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadArray``1(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads an array of the given type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="br">Reader</param>
            <param name="count">Number of items</param>
            <returns>Resulting array</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadArray``1(System.IO.BinaryReader,System.Int64,System.Int32)">
            <summary>
            Reads an array of the given type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="br">Reader</param>
            <param name="offset">Absolute offset of the string</param>
            <param name="count">Number of items</param>
            <returns>Resulting array</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadStruct``1(System.IO.BinaryReader)">
            <summary>
            Reads the given structure from the reader
            </summary>
            <typeparam name="T"></typeparam>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadStruct``1(System.IO.BinaryReader,System.Int64)">
            <summary>
            Reads the given structure from the reader
            </summary>
            <param name="offset">Absolute offset of the string</param>
            <typeparam name="T"></typeparam>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.Seek(System.IO.BinaryReader,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position of the Base Stream
            </summary>
            <param name="br"></param>
            <param name="offset">Offset to seek to.</param>
            <param name="seekOrigin">Seek Origin</param>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.FindString(System.IO.BinaryReader,System.String,System.Boolean)">
            <summary>
            Finds occurences of a string in the stream
            </summary>
            <param name="br">Reader to use for scanning</param>
            <param name="needle">String Needle to search for</param>
            <param name="firstOccurence">Stops at first result</param>
            <returns>Resulting offsets</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadBEInt32(System.IO.BinaryReader)">
            <summary>
            Reads a 4-byte big endian signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <param name="br">Reader</param>
            <returns>Resulting 32Bit Integer</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.ReadBEInt24(System.IO.BinaryReader)">
            <summary>
            Reads a 3-byte big endian signed integer from the current stream and advances the current position of the stream by three bytes.
            </summary>
            <param name="br">Reader</param>
            <returns>Resulting 32Bit Integer</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.Read7BitEncodedInt(System.IO.BinaryReader)">
            <summary>
            Reads a variable length integer from the current stream 
            </summary>
            <param name="br">Reader</param>
            <returns>Resulting 32Bit Integer</returns>
        </member>
        <member name="M:PhilLibX.IO.BinaryReaderExtensions.FindBytes(System.IO.BinaryReader,System.Byte[],System.Boolean)">
            <summary>
            Finds occurences of bytes
            </summary>
            <param name="br">Reader</param>
            <param name="needle">Byte Array Needle to search for</param>
            <param name="firstOccurence">Stops at first result</param>
            <returns>Resulting offsets</returns>
        </member>
        <member name="T:PhilLibX.IO.BinaryWriterExtensions">
            <summary>
            IO Utilities/Extensions
            </summary>
        </member>
        <member name="M:PhilLibX.IO.BinaryWriterExtensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a null terminated string
            </summary>
            <param name="bw">Output Stream</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:PhilLibX.IO.BinaryWriterExtensions.WriteNullTerminatedUTF16String(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes a UTF16 null terminated string
            </summary>
            <param name="bw">Output Stream</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:PhilLibX.IO.BinaryWriterExtensions.WriteStruct``1(System.IO.BinaryWriter,``0)">
            <summary>
            Writes the given structure
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bw"></param>
            <param name="value"></param>
        </member>
        <member name="T:PhilLibX.IO.MemoryUtil">
            <summary>
            Utilities for Reading/Writing to/from Process Memory
            </summary>
        </member>
        <member name="F:PhilLibX.IO.MemoryUtil.ProcessVMRead">
            <summary>
            Required to read memory in a process using ReadProcessMemory.
            </summary>
        </member>
        <member name="F:PhilLibX.IO.MemoryUtil.ProcessVMWrite">
            <summary>
            Required to write to memory in a process using WriteProcessMemory.
            </summary>
        </member>
        <member name="F:PhilLibX.IO.MemoryUtil.ProcessVMOperation">
            <summary>
            Required to perform an operation on the address space of a process
            </summary>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadBytes(System.IntPtr,System.Int64,System.Int32)">
            <summary>
            Reads bytes from a Processes Memory and returns a byte array of read data.
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <param name="numBytes">The number of bytes to be read from the specified process.</param>
            <returns>Bytes read</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadInt64(System.IntPtr,System.Int64)">
            <summary>
            Reads a 64Bit Integer from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadUInt64(System.IntPtr,System.Int64)">
            <summary>
            Reads an unsigned 64Bit Integer from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadInt32(System.IntPtr,System.Int64)">
            <summary>
            Reads a 32Bit Integer from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadUInt32(System.IntPtr,System.Int64)">
            <summary>
            Reads an unsigned 32Bit Integer from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadInt16(System.IntPtr,System.Int64)">
            <summary>
            Reads a 16Bit Integer from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadUInt16(System.IntPtr,System.Int64)">
            <summary>
            Reads an unsigned 16Bit Integer from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadSingle(System.IntPtr,System.Int64)">
            <summary>
            Reads a 4 byte single precision floating point number from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadDouble(System.IntPtr,System.Int64)">
            <summary>
            Reads an 8 byte double precision floating point number from a Processes Memory
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadNullTerminatedString(System.IntPtr,System.Int64,System.Int32)">
            <summary>
            Reads a string from a processes' memory terminated by a null byte.
            </summary>
            <param name="processHandle">Process Handle Pointer</param>
            <param name="address">Memory Address</param>
            <param name="bufferSize">Buffer Read Size</param>
            <returns>Resulting String</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.ReadStruct``1(System.IntPtr,System.Int64)">
            <summary>
            Reads a struct from a Processes Memory
            </summary>
            <typeparam name="T">Struct Type</typeparam>
            <param name="processHandle">Process Handle Pointer</param>
            <param name="address">Memory Address</param>
            <returns>Resulting Struct</returns>
        </member>
        <member name="M:PhilLibX.IO.MemoryUtil.FindBytes(System.IntPtr,System.Nullable{System.Byte}[],System.Int64,System.Int64,System.Boolean,System.Int32)">
            <summary>
            Searches for bytes in a processes memory.
            </summary>
            <param name="processHandle">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="needle">Byte Sequence to scan for.</param>
            <param name="startAddress">Address to start the search at.</param>
            <param name="endAddress">Address to end the search at.</param>
            <param name="bufferSize">Byte Buffer Size</param>
            <param name="firstMatch">If we should stop the search at the first result.</param>
            <returns></returns>
        </member>
        <member name="T:PhilLibX.IO.ProcessReader">
            <summary>
            A class to help with reading the memory of other processes.
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessReader._Process">
            <summary>
            Internal Process Property
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessReader._Handle">
            <summary>
            Internal Handle Property
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessReader.ActiveProcess">
            <summary>
            Active Process
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessReader.Handle">
            <summary>
            Active Process Handle
            </summary>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.#ctor(System.Diagnostics.Process)">
            <summary>
            Initalizes a Process Reader with a Process
            </summary>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadBytes(System.Int64,System.Int32)">
            <summary>
            Reads bytes from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <param name="numBytes">The number of bytes to be read.</param>
            <returns>Bytes read</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadInt64(System.Int64)">
            <summary>
            Reads 64Bit Integer from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadUInt64(System.Int64)">
            <summary>
            Reads an unsigned 64Bit Integer from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadInt32(System.Int64)">
            <summary>
            Reads 32Bit Integer from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadUInt32(System.Int64)">
            <summary>
            Reads 32Bit Integer from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadInt16(System.Int64)">
            <summary>
            Reads a 16Bit Integer from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadUInt16(System.Int64)">
            <summary>
            Reads an unsigned 16Bit Integer from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadSingle(System.Int64)">
            <summary>
            Reads a 4 byte single precision floating point number from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadDouble(System.Int64)">
            <summary>
            Reads an 8 byte double precision floating point number from the Processes Memory
            </summary>
            <param name="address">The address of the data to be read.</param>
            <returns>Resulting Data</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadNullTerminatedString(System.Int64,System.Int32)">
            <summary>
            Reads a string from the processes' memory terminated by a null byte.
            </summary>
            <param name="address">Memory Address</param>
            <param name="bufferSize">Buffer Read Size</param>
            <returns>Resulting String</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadArray``1(System.Int64,System.Int32)">
            <summary>
            Reads an array of the given type
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="address">Memory Address</param>
            <param name="count">Number of items</param>
            <returns>Resulting array</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.ReadStruct``1(System.Int64)">
            <summary>
            Reads a struct from the Processes Memory
            </summary>
            <typeparam name="T">Struct Type</typeparam>
            <param name="address">Memory Address</param>
            <returns>Resulting Struct</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.FindBytes(System.Nullable{System.Byte}[],System.Int64,System.Int64,System.Boolean,System.Int32)">
            <summary>
            Searches for bytes in the Processes Memory
            </summary>
            <param name="needle">Byte Sequence to scan for.</param>
            <param name="startAddress">Address to start the search at.</param>
            <param name="endAddress">Address to end the search at.</param>
            <param name="firstMatch">If we should stop the search at the first result.</param>
            <param name="bufferSize">Byte Buffer Size</param>
            <returns>Results</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.GetBaseAddress">
            <summary>
            Gets the Active Processes' Base Address
            </summary>
            <returns>Base Address of the Active Process</returns>
        </member>
        <member name="M:PhilLibX.IO.ProcessReader.GetModuleMemorySize">
            <summary>
            Gets the size of the Main Module Size
            </summary>
            <returns>Main Module Size</returns>
        </member>
        <member name="T:PhilLibX.IO.ProcessWriter">
            <summary>
            A class to help with writing to the memory of other processes.
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessWriter._Process">
            <summary>
            Internal Process Property
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessWriter._Handle">
            <summary>
            Internal Handle Property
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessWriter.ActiveProcess">
            <summary>
            Active Process
            </summary>
        </member>
        <member name="P:PhilLibX.IO.ProcessWriter.Handle">
            <summary>
            Active Process Handle
            </summary>
        </member>
        <member name="M:PhilLibX.IO.ProcessWriter.#ctor(System.Diagnostics.Process)">
            <summary>
            Initalizes a Process Reader with a Process
            </summary>
        </member>
        <member name="M:PhilLibX.IO.ProcessWriter.WriteBytes(System.Int64,System.Byte[])">
            <summary>
            Writes bytes to the processes' memory
            </summary>
            <param name="address"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:PhilLibX.Logger">
            <summary>
            Basic Logging Class
            </summary>
        </member>
        <member name="T:PhilLibX.Logger.MessageType">
            <summary>
            Message Types for logging
            </summary>
        </member>
        <member name="P:PhilLibX.Logger.LogFile">
            <summary>
            Log File Name
            </summary>
        </member>
        <member name="P:PhilLibX.Logger.LogName">
            <summary>
            Current Log Name
            </summary>
        </member>
        <member name="F:PhilLibX.Logger.Buffer">
            <summary>
            Active Stream
            </summary>
        </member>
        <member name="M:PhilLibX.Logger.#ctor(System.String,System.String)">
            <summary>
            Initiate Logger
            </summary>
            <param name="logName">Log Name</param>
            <param name="fileName">Log File Name</param>
        </member>
        <member name="M:PhilLibX.Logger.Write(System.Object,PhilLibX.Logger.MessageType)">
            <summary>
            Writes a message to the log
            </summary>
            <param name="message"></param>
            <param name="messageType"></param>
        </member>
        <member name="M:PhilLibX.Logger.Flush">
            <summary>
            Closes current Streamwriter
            </summary>
        </member>
        <member name="M:PhilLibX.Logger.Dispose">
            <summary>
            Disposes of the Logger and its Streamwriter
            </summary>
        </member>
        <member name="T:PhilLibX.MathUtilities">
            <summary>
            Mathematic Utilities
            </summary>
        </member>
        <member name="M:PhilLibX.MathUtilities.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps Value to a range.
            </summary>
            <param name="value">Value to Clamp</param>
            <param name="max">Max value</param>
            <param name="min">Min value</param>
            <returns>Clamped Value</returns>
        </member>
        <member name="M:PhilLibX.MathUtilities.CMToInch(System.Double)">
            <summary>
            Converts CM to Inch
            </summary>
            <param name="value">CM Value</param>
            <returns>Value in inches</returns>
        </member>
        <member name="T:PhilLibX.Mathematics.Matrix">
            <summary>
            A class to hold and manipulate a Matrix
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Matrix.Values">
            <summary>
            Gets or Sets the Values
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.#ctor(System.Int32)">
            <summary>
            Initializes a Matrix of the given dimension
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Subtraction(PhilLibX.Mathematics.Matrix,PhilLibX.Mathematics.Matrix)">
            <summary>
            Subtracts two given Matrixs
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Subtraction(PhilLibX.Mathematics.Matrix,System.Single)">
            <summary>
            Subtracts the given value from the Matrix
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Addition(PhilLibX.Mathematics.Matrix,PhilLibX.Mathematics.Matrix)">
            <summary>
            Adds two given Matrixs
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Addition(PhilLibX.Mathematics.Matrix,System.Single)">
            <summary>
            Adds the given value to the Matrix
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Multiply(PhilLibX.Mathematics.Matrix,PhilLibX.Mathematics.Matrix)">
            <summary>
            Multiplies two given Matrixs
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Multiply(PhilLibX.Mathematics.Matrix,System.Single)">
            <summary>
            Multiplies the Matrix by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Division(PhilLibX.Mathematics.Matrix,PhilLibX.Mathematics.Matrix)">
            <summary>
            Divides two given Matrixs
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.op_Division(PhilLibX.Mathematics.Matrix,System.Single)">
            <summary>
            Divides the Matrix by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.TransformVector(PhilLibX.Mathematics.Vector3)">
            <summary>
            Transforms the Vector by the Matrix
            </summary>
            <param name="vector">Vector To Transform</param>
            <returns>Resulting Vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Matrix.ToString">
            <summary>
            Gets a string representation of the Matrix
            </summary>
            <returns>String representation of the Matrix</returns>
        </member>
        <member name="T:PhilLibX.Mathematics.Vector2">
            <summary>
            A class to hold a 2-Dimensional Vector
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector2.X">
            <summary>
            X Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector2.Y">
            <summary>
            Y Value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a 2-Dimensional Vector with the given values
            </summary>
            <param name="x">X Value</param>
            <param name="y">Y Value</param>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.DotProduct(PhilLibX.Mathematics.Vector2)">
            <summary>
            Returns the dot product of the 2 vectors
            </summary>
            <param name="input">Input vector</param>
            <returns>Single result</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Subtraction(PhilLibX.Mathematics.Vector2,PhilLibX.Mathematics.Vector2)">
            <summary>
            Subtracts two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Subtraction(PhilLibX.Mathematics.Vector2,System.Single)">
            <summary>
            Subtracts the given value from the vector
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Addition(PhilLibX.Mathematics.Vector2,PhilLibX.Mathematics.Vector2)">
            <summary>
            Adds two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Addition(PhilLibX.Mathematics.Vector2,System.Single)">
            <summary>
            Adds the given value to the vector
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Multiply(PhilLibX.Mathematics.Vector2,PhilLibX.Mathematics.Vector2)">
            <summary>
            Multiplies two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Multiply(PhilLibX.Mathematics.Vector2,System.Single)">
            <summary>
            Multiplies the vector by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Division(PhilLibX.Mathematics.Vector2,PhilLibX.Mathematics.Vector2)">
            <summary>
            Divides two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.op_Division(PhilLibX.Mathematics.Vector2,System.Single)">
            <summary>
            Divides the vector by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.Normalize">
            <summary>
            Normalizes the Vector
            </summary>
            <returns>Normalized Vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector2.ToString">
            <summary>
            Gets a string representation of the vector
            </summary>
            <returns>String representation of the vector</returns>
        </member>
        <member name="T:PhilLibX.Mathematics.Vector3">
            <summary>
            A class to hold a 3-Dimensional Vector
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector3.X">
            <summary>
            X Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector3.Y">
            <summary>
            Y Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector3.Z">
            <summary>
            Z Value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a 3-Dimensional Vector with the given values
            </summary>
            <param name="x">X Value</param>
            <param name="y">Y Value</param>
            <param name="z">Z Value</param>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.DotProduct(PhilLibX.Mathematics.Vector3)">
            <summary>
            Returns the dot product of the 2 vectors
            </summary>
            <param name="input">Input vector</param>
            <returns>Single result</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.CrossProduct(PhilLibX.Mathematics.Vector3)">
            <summary>
            Returns the cross product of the 2 vectors
            </summary>
            <param name="input">Input vector</param>
            <returns>Single result</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Subtraction(PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3)">
            <summary>
            Subtracts two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Subtraction(PhilLibX.Mathematics.Vector3,System.Single)">
            <summary>
            Subtracts the given value from the vector
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Addition(PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3)">
            <summary>
            Adds two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Addition(PhilLibX.Mathematics.Vector3,System.Single)">
            <summary>
            Adds the given value to the vector
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Multiply(PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3)">
            <summary>
            Multiplies two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Multiply(PhilLibX.Mathematics.Vector3,System.Single)">
            <summary>
            Multiplies the vector by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Division(PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3)">
            <summary>
            Divides two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.op_Division(PhilLibX.Mathematics.Vector3,System.Single)">
            <summary>
            Divides the vector by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.Normalize">
            <summary>
            Normalizes the Vector
            </summary>
            <returns>Normalized Vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.Lerp(PhilLibX.Mathematics.Vector3,System.Single)">
            <summary>
            Returns the linear interpolation of Vector with coefficient
            </summary>
            <param name="max">Max/End Value</param>
            <param name="coefficient">Coefficient</param>
            <returns>Resulting Vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector3.ToString">
            <summary>
            Gets a string representation of the vector
            </summary>
            <returns>String representation of the vector</returns>
        </member>
        <member name="T:PhilLibX.Mathematics.Quaternion">
            <summary>
            A class to hold and manipulate a Quaternion
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Quaternion.X">
            <summary>
            X Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Quaternion.Y">
            <summary>
            Y Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Quaternion.Z">
            <summary>
            Z Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Quaternion.W">
            <summary>
            W Value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a 4-Dimensional Quaternion with the given values
            </summary>
            <param name="x">X Value</param>
            <param name="y">Y Value</param>
            <param name="z">Z Value</param>
            <param name="w">W Value</param>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Subtraction(PhilLibX.Mathematics.Quaternion,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Subtracts two given Quaternions
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Subtraction(PhilLibX.Mathematics.Quaternion,System.Single)">
            <summary>
            Subtracts the given value from the Quaternion
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Addition(PhilLibX.Mathematics.Quaternion,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Adds two given Quaternions
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Addition(PhilLibX.Mathematics.Quaternion,System.Single)">
            <summary>
            Adds the given value to the Quaternion
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Multiply(PhilLibX.Mathematics.Quaternion,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Multiplies two given Quaternions
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Multiply(PhilLibX.Mathematics.Quaternion,System.Single)">
            <summary>
            Multiplies the Quaternion by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Division(PhilLibX.Mathematics.Quaternion,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Divides two given Quaternions
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.op_Division(PhilLibX.Mathematics.Quaternion,System.Single)">
            <summary>
            Divides the Quaternion by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.Inverse">
            <summary>
            Returns an inverse of the Quaternion
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.SLerp(PhilLibX.Mathematics.Quaternion,System.Single)">
            <summary>
            Returns the linear interpolation of Quat with coefficient
            </summary>
            <param name="max">Max/End Value</param>
            <param name="coefficient">Coefficient</param>
            <returns>Resulting Quat</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.Lerp(PhilLibX.Mathematics.Quaternion,System.Single)">
            <summary>
            Returns the linear interpolation of Quat with coefficient
            </summary>
            <param name="max">Max/End Value</param>
            <param name="coefficient">Coefficient</param>
            <returns>Resulting Quat</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.ToMatrix">
            <summary>
            Converts the Quaternion to a 3-Dimensional Matrix
            </summary>
            <returns>3-D Matrix</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.ToEuler">
            <summary>
            Converts the Quaternion to an Euler vector
            </summary>
            <returns>Euler vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Quaternion.ToString">
            <summary>
            Gets a string representation of the Quaternion
            
            </summary>
            <returns>String representation of the Quaternion</returns>
        </member>
        <member name="T:PhilLibX.Mathematics.Vector4">
            <summary>
            A class to hold a 4-Dimensional Vector
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector4.X">
            <summary>
            X Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector4.Y">
            <summary>
            Y Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector4.Z">
            <summary>
            Z Value
            </summary>
        </member>
        <member name="P:PhilLibX.Mathematics.Vector4.W">
            <summary>
            W Value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a 4-Dimensional Vector with the given values
            </summary>
            <param name="x">X Value</param>
            <param name="y">Y Value</param>
            <param name="z">Z Value</param>
            <param name="w">W Value</param>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.DotProduct(PhilLibX.Mathematics.Vector4)">
            <summary>
            Returns the dot product of the 2 vectors
            </summary>
            <param name="input">Input vector</param>
            <returns>Single result</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Subtraction(PhilLibX.Mathematics.Vector4,PhilLibX.Mathematics.Vector4)">
            <summary>
            Subtracts two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Subtraction(PhilLibX.Mathematics.Vector4,System.Single)">
            <summary>
            Subtracts the given value from the vector
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Addition(PhilLibX.Mathematics.Vector4,PhilLibX.Mathematics.Vector4)">
            <summary>
            Adds two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Addition(PhilLibX.Mathematics.Vector4,System.Single)">
            <summary>
            Adds the given value to the vector
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Multiply(PhilLibX.Mathematics.Vector4,PhilLibX.Mathematics.Vector4)">
            <summary>
            Multiplies two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Multiply(PhilLibX.Mathematics.Vector4,System.Single)">
            <summary>
            Multiplies the vector by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Division(PhilLibX.Mathematics.Vector4,PhilLibX.Mathematics.Vector4)">
            <summary>
            Divides two given vectors
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.op_Division(PhilLibX.Mathematics.Vector4,System.Single)">
            <summary>
            Divides the vector by the given value
            </summary>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.Normalize">
            <summary>
            Normalizes the Vector
            </summary>
            <returns>Normalized Vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.ToVector3">
            <summary>
            Returns the first 3 components of the vector as a Vector3
            </summary>
            <returns>3-D Vector</returns>
        </member>
        <member name="M:PhilLibX.Mathematics.Vector4.ToString">
            <summary>
            Gets a string representation of the vector
            </summary>
            <returns>String representation of the vector</returns>
        </member>
        <member name="T:PhilLibX.Model">
            <summary>
            A class to hold a 3-D Model
            </summary>
        </member>
        <member name="T:PhilLibX.Model.Bone">
            <summary>
            A class to hold a Bone
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.Name">
            <summary>
            Gets or Sets the name of the bone
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.ParentIndex">
            <summary>
            Gets or Sets the index of the parent bone
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.LocalPosition">
            <summary>
            Gets or Sets the position relative to the parent
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.LocalRotation">
            <summary>
            Gets or sets the rotation relative to the parent
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.GlobalPosition">
            <summary>
            Gets or Sets the position relative to the parent
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.GlobalRotation">
            <summary>
            Gets or sets the rotation relative to the parent
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bone.Scale">
            <summary>
            Gets or Sets the scale
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Bone.#ctor(System.String)">
            <summary>
            Creates a new Bone with the given data
            </summary>
            <param name="name">Bone Name</param>
        </member>
        <member name="M:PhilLibX.Model.Bone.#ctor(System.String,System.Int32,PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Creates a new Bone with the given data
            </summary>
            <param name="name">Bone Name</param>
            <param name="parent">Bone Parent</param>
            <param name="pos">Bone Position</param>
            <param name="rot">Bone Rotation</param>
        </member>
        <member name="M:PhilLibX.Model.Bone.#ctor(System.String,System.Int32,PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Quaternion,PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Quaternion)">
            <summary>
            Creates a new Bone with the given data
            </summary>
            <param name="name">Bone Name</param>
            <param name="parent">Bone Parent</param>
            <param name="lPos">Local Bone Position</param>
            <param name="lRot">Local Bone Rotation</param>
            <param name="gPos">Global Bone Position</param>
            <param name="gRot">Local Bone Rotation</param>
        </member>
        <member name="M:PhilLibX.Model.Bone.HierarchicalSort(System.Collections.Generic.List{PhilLibX.Model.Bone},System.Collections.Generic.List{PhilLibX.Model.Bone},System.Collections.Generic.List{PhilLibX.Model.Bone})">
            <summary>
            
            </summary>
        </member>
        <member name="T:PhilLibX.Model.Vertex">
            <summary>
            A class to hold a vertex
            </summary>
        </member>
        <member name="T:PhilLibX.Model.Vertex.Weight">
            <summary>
            A class to hold a vertex weight
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Weight.BoneIndex">
            <summary>
            Gets or Sets the bone index
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Weight.Influence">
            <summary>
            Gets or Sets the Influence
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Position">
            <summary>
            Gets or Sets the vertex position
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Normal">
            <summary>
            Gets or Sets the vertex normal
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Tangent">
            <summary>
            Gets or Sets the vertex tangent
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Color">
            <summary>
            Gets or Sets the vertex color
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.UVs">
            <summary>
            Gets or Sets the vertex uv sets
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Vertex.Weights">
            <summary>
            Gets or Sets the vertex weights
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Vertex.#ctor">
            <summary>
            Creates a new vertex
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Vertex.#ctor(PhilLibX.Mathematics.Vector3)">
            <summary>
            Creates a new vertex
            </summary>
            <param name="position">Position</param>
        </member>
        <member name="M:PhilLibX.Model.Vertex.#ctor(PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3)">
            <summary>
            Creates a new vertex
            </summary>
            <param name="position">Position</param>
            <param name="normal">Normal</param>
        </member>
        <member name="M:PhilLibX.Model.Vertex.#ctor(PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3,PhilLibX.Mathematics.Vector3)">
            <summary>
            Creates a new vertex
            </summary>
            <param name="position">Position</param>
            <param name="normal">Normal</param>
            <param name="tangent">Tangent</param>
        </member>
        <member name="T:PhilLibX.Model.Face">
            <summary>
            A class to hold a face with multiple vertex indices
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Face.Indices">
            <summary>
            Gets or Sets the face indices
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Face.#ctor(System.Int32)">
            <summary>
            Creates a new face with the given number of vertices
            </summary>
            <param name="vertexCount">Vertex count</param>
        </member>
        <member name="M:PhilLibX.Model.Face.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new polygon face with the given vertex indices
            </summary>
            <param name="v1">Index 1</param>
            <param name="v2">Index 2</param>
            <param name="v3">Index 3</param>
        </member>
        <member name="T:PhilLibX.Model.Mesh">
            <summary>
            A class to hold a mesh
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Mesh.Vertices">
            <summary>
            Gets or Sets the vertices
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Mesh.Faces">
            <summary>
            Gets or Sets the faces
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Mesh.MaterialIndices">
            <summary>
            Gets or Sets the material indices
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Mesh.#ctor">
            <summary>
            Creates a new mesh
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Mesh.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new mesh and preallocates the data counts
            </summary>
            <param name="vertexCount">Number of vertices</param>
            <param name="faceCount">Number of faces</param>
        </member>
        <member name="T:PhilLibX.Model.Material">
            <summary>
            A class to hold a material
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.Name">
            <summary>
            Gets or Sets the name of the material
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.Images">
            <summary>
            Gets or Sets the material images
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.Settings">
            <summary>
            Gets or Sets the material settings
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.DiffuseMapName">
            <summary>
            Gets or Sets the name of the diffuse map key in the images dictionary
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.NormalMapName">
            <summary>
            Gets or Sets the name of the normal map key in the images dictionary
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.SpecularMapName">
            <summary>
            Gets or Sets the name of the specular map key in the images dictionary
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Material.GlossMapName">
            <summary>
            Gets or Sets the name of the gloss map key in the images dictionary
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Material.#ctor(System.String)">
            <summary>
            Creates a new material with the given name
            </summary>
            <param name="name">Material name</param>
        </member>
        <member name="M:PhilLibX.Model.Material.GetImage(System.String)">
            <summary>
            Gets the image of the given type
            </summary>
            <param name="key">Image Key/Type</param>
            <returns>Resulting Images</returns>
        </member>
        <member name="M:PhilLibX.Model.Material.ToString">
            <summary>
            Gets the name of the material as a string representation of it
            </summary>
            <returns>Material name</returns>
        </member>
        <member name="P:PhilLibX.Model.Name">
            <summary>
            Gets or Sets the Model Name
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Bones">
            <summary>
            Gets or Sets the bones/joints
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Meshes">
            <summary>
            Gets or Sets the meshes
            </summary>
        </member>
        <member name="P:PhilLibX.Model.Materials">
            <summary>
            Gets or Sets the materials
            </summary>
        </member>
        <member name="M:PhilLibX.Model.#ctor">
            <summary>
            Creates a new Model
            </summary>
        </member>
        <member name="M:PhilLibX.Model.#ctor(System.String)">
            <summary>
            Creates a new Model
            </summary>
            <param name="name">Model Name</param>
        </member>
        <member name="M:PhilLibX.Model.HierarchicalSort">
            <summary>
            
            </summary>
        </member>
        <member name="M:PhilLibX.Model.GenerateGlobalBoneData">
            <summary>
            Generates global positions and rotations
            </summary>
        </member>
        <member name="M:PhilLibX.Model.GenerateLocalBoneData">
            <summary>
            Generates local positions and rotations
            </summary>
        </member>
        <member name="M:PhilLibX.Model.Scale(System.Single)">
            <summary>
            Scales the model by the given value
            </summary>
            <param name="value">Value to scale the model by</param>
        </member>
        <member name="M:PhilLibX.Model.HasBone(System.String)">
            <summary>
            Checks if the model contains a bone
            </summary>
            <param name="bone">Bone to locate</param>
            <returns>True if the bone exists, otherwise false</returns>
        </member>
        <member name="M:PhilLibX.Model.Save(System.String)">
            <summary>
            Saves the file to the given format, determined by the extension
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:PhilLibX.Model.ToOBJ(System.String)">
            <summary>
            Saves the model to an obj
            </summary>
            <param name="path">Output Path</param>
        </member>
        <member name="M:PhilLibX.Model.ToSEModel(System.String)">
            <summary>
            Saves the model to a SEModel
            </summary>
            <param name="path">Output Path</param>
        </member>
        <member name="M:PhilLibX.Model.ToSMD(System.String)">
            <summary>
            Saves the model to an SMD
            </summary>
            <param name="path">Output Path</param>
        </member>
        <member name="M:PhilLibX.Model.ToXNALaraASCII(System.String)">
            <summary>
            Saves the model to an XNA Lara ASCII
            </summary>
            <param name="path">Output Path</param>
        </member>
        <member name="T:PhilLibX.NativeMethods">
            <summary>
            Description: Native/Unmanaged Methods (DLLs required for certain components)
            </summary>
        </member>
        <member name="F:PhilLibX.NativeMethods.OodleLibraryPath">
            <summary>
            Oodle Library Path
            </summary>
        </member>
        <member name="M:PhilLibX.NativeMethods.ReadProcessMemory(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="lpBaseAddress">A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the contents from the address space of the specified process.</param>
            <param name="nSize">The number of bytes to be read from the specified process.</param>
            <param name="lpNumberOfBytesRead">A pointer to a variable that receives the number of bytes transferred into the specified buffer.</param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.NativeMethods.WriteProcessMemory(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads data from an area of memory in a specified process. The entire area to be read must be accessible or the operation fails.
            </summary>
            <param name="hProcess">A handle to the process with memory that is being read. The handle must have PROCESS_VM_READ access to the process.</param>
            <param name="lpBaseAddress">A pointer to the base address in the specified process from which to read. Before any data transfer occurs, the system verifies that all data in the base address and memory of the specified size is accessible for read access, and if it is not accessible the function fails.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the contents from the address space of the specified process.</param>
            <param name="nSize">The number of bytes to be read from the specified process.</param>
            <param name="lpNumberOfBytesRead">A pointer to a variable that receives the number of bytes transferred into the specified buffer.</param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.NativeMethods.OpenProcess(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Opens an existing local process object.
            </summary>
            <param name="dwDesiredAccess">The access to the process object. This access right is checked against the security descriptor for the process. This parameter can be one or more of the process access rights. If the caller has enabled the SeDebugPrivilege privilege, the requested access is granted regardless of the contents of the security descriptor.</param>
            <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
            <param name="dwProcessId">The identifier of the local process to be opened.</param>
            <returns></returns>
        </member>
        <member name="M:PhilLibX.NativeMethods.OodleLZ_Decompress(System.Byte[],System.Int64,System.Byte[],System.Int64,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Oodle64 Decompression Method 
            </summary>
        </member>
        <member name="T:PhilLibX.Compression.Oodle">
            <summary>
            Oodle Compression Utils
            </summary>
        </member>
        <member name="F:PhilLibX.Compression.Oodle.OodleLibraryPath">
            <summary>
            Oodle Library Path
            </summary>
        </member>
        <member name="M:PhilLibX.Compression.Oodle.OodleLZ_Decompress(System.Byte[],System.Int64,System.Byte[],System.Int64,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Oodle64 Decompression Method 
            </summary>
        </member>
        <member name="M:PhilLibX.Compression.Oodle.Decompress(System.Byte[],System.Int64)">
            <summary>
            Decompresses a byte array of Oodle Compressed Data (Requires Oodle DLL)
            </summary>
            <param name="input">Input Compressed Data</param>
            <param name="decompressedLength">Decompressed Size</param>
            <returns>Resulting Array if success, otherwise null.</returns>
        </member>
        <member name="T:PhilLibX.Printer">
            <summary>
            Class to Print stuff to the Console with more swag 🖨️
            </summary>
        </member>
        <member name="F:PhilLibX.Printer.PrefixPadding">
            <summary>
            Prefix Padding
            </summary>
        </member>
        <member name="F:PhilLibX.Printer.PrefixColor">
            <summary>
            Prefix Color
            </summary>
        </member>
        <member name="M:PhilLibX.Printer.SetPrefixPadding(System.Int32)">
            <summary>
            Sets Prefix Padding
            </summary>
            <param name="padding">Padding Size</param>
        </member>
        <member name="M:PhilLibX.Printer.SetPrefixBackgroundColor(System.ConsoleColor)">
            <summary>
            Sets the Console Prefix Color
            </summary>
            <param name="color">Background Color for Prefix</param>
        </member>
        <member name="M:PhilLibX.Printer.WriteLine(System.Object,System.Object,System.ConsoleColor)">
            <summary>
            Writes a line to the console with optional BackGround
            </summary>
            <param name="value">Value to print</param>
            <param name="prefix">Value to prefix</param>
            <param name="backgroundColor">Background Color</param>
        </member>
        <member name="M:PhilLibX.Printer.WriteException(System.Exception,System.Object,System.Object,System.ConsoleColor)">
            <summary>
            Writes a line to the console with optional BackGround
            </summary>
            <param name="exception">Exception to write</param>
            <param name="value">Value to print</param>
            <param name="prefix">Value to prefix</param>
            <param name="backgroundColor">Background Color</param>
        </member>
        <member name="M:PhilLibX.Printer.Write(System.Object,System.Object,System.ConsoleColor)">
            <summary>
            Writes to the console with optional BackGround
            </summary>
            <param name="value">Value to print</param>
            <param name="prefix">Value to prefix</param>
            <param name="backgroundColor">Background Color</param>
        </member>
    </members>
</doc>
